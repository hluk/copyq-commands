[Command]
Command="
    copyq:
    const markdownTag = 'markdown'
    const mimeTags = 'application/x-copyq-tags'
    const tagFragments = ['@']
    const textFragments = [
        '`',
        '\\n##',
        '](',
        '\\n* ',
    ]
    const errorLabel = 'Markdown Error'

    function contains(text, what) {
        return text.indexOf(what) != -1
    }

    function startsWith(text, what) {
        return what === text.substring(0, what.length)
    }

    function matchesAnyOf(text, fragments) {
        return fragments.find(e => text.indexOf(e) != -1)
    }

    function addHtml(html, tag) {
        setData(mimeHtml, html)
        if (tag) {
            tags = data(mimeTags)
            tags = (tags ? str(tags) + ',' : '') + tag
            setData(mimeTags, tags)
        }
        return true
    }

    function addHtmlOutput(result, tag) {
        if (!result) {
            notification(
                '.id', 'highlight',
                '.message', 'Failed to add syntax highlighting',
            )
            return false
        }

        if (result.exit_code !== 0) {
            popup(errorLabel, result.stderr)
            return false
        }

        return addHtml(result.stdout, tag)
    }

    function markdown(textData) {
        result = execute('marked', null, textData)
        return addHtmlOutput(result, markdownTag)
    }

    function highlightCode() {
        var formats = dataFormats()
        if ( formats.indexOf(mimeHidden) != -1
          || formats.indexOf(mimeHtml) != -1 ) {
            return false
        }

        var textData = data(mimeText)
        var text = str(textData)
        if (!text)
            return false

        tags = str(data(mimeTags))

        try {
            if ( startsWith(text, 'http') )
                return markdown(textData, 'md')

            if ( matchesAnyOf(tags, tagFragments)
              || matchesAnyOf(text, textFragments) ) {
                return markdown(textData)
            }
        } catch(e) {
            popup(errorLabel, e)
            serverLog(errorLabel + ': ' + e)
        }

        return false
    }

    highlightCode()"
Display=true
Icon=\xf60f
Name=Render Markdown
