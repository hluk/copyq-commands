[Command]
Command="
    copyq:
    const mimeTags = 'application/x-copyq-tags'

    const pythonCode = `
    import sys
    from pygments import highlight
    from pygments.lexers import get_lexer_by_name
    from pygments.formatters import HtmlFormatter

    code = sys.stdin.read()
    lexer = get_lexer_by_name(sys.argv[1])
    formatter = HtmlFormatter(noclasses=True, style='tango', encoding='utf-8')
    formatter.style.background_color = 'none'
    print(highlight(code, lexer, formatter).decode())
    `

    const tagPartToLang = {
        'CopyQ Commands': 'js',
        '.cpp': 'cpp',
        '.h ': 'cpp',
        '.py': 'python',
        '.rs': 'rust',
        '.rb': 'ruby',
        '.yaml': 'yaml',
        '.yml': 'yaml',
        '@': 'md',
    }

    const prefixToLang = {
        '[Command]': 'ini',
        '#!/bin/bash': 'bash',
        'SELECT': 'sql',
    }

    const textPartToLang = {
        '; then\\n': 'bash',
        '; do\\n': 'bash',
        '`': 'md',
        ' function(': 'js',
        'fn ': 'rust',
        'if (': 'cpp',
        'for (': 'cpp',
        'while (': 'cpp',
        '</': 'html',
        'def ': 'python',
        'self ': 'python',
        '\":': 'json',
        '\\n##': 'md',
        '](': 'md',
        '\\n* ': 'md',
        '#{': 'ruby',
        '(@': 'ruby',
        ':\\n': 'yaml',
    }

    const errorLabel = 'Highlight Code Error'

    function contains(text, what) {
        return text.indexOf(what) != -1
    }

    function startsWith(text, what) {
        return what === text.substring(0, what.length)
    }

    function langFromTags(tags) {
        for (var tagPart in tagPartToLang) {
          if (tags.indexOf(tagPart) != -1)
            return tagPartToLang[tagPart]
        }
        return ''
    }

    function langFromPrefix(text) {
        for (var prefix in prefixToLang) {
          if (startsWith(text, prefix))
            return prefixToLang[prefix]
        }
        return ''
    }

    function langFromTextPart(text) {
        for (var part in textPartToLang) {
          if (text.indexOf(part) != -1)
            return textPartToLang[part]
        }
        return ''
    }

    function addHtml(html, tag) {
        setData(mimeHtml, html)
        if (tag) {
            tags = data(mimeTags)
            tags = (tags ? str(tags) + ',' : '') + tag
            setData(mimeTags, tags)
        }
        return true
    }

    function addHtmlOutput(result, tag) {
        if (!result) {
            notification(
                '.id', 'highlight',
                '.message', 'Failed to add syntax highlighting',
            )
            return false
        }

        if (result.exit_code !== 0) {
            popup(errorLabel, result.stderr)
            return false
        }

        return addHtml(result.stdout, tag)
    }

    function code(textData, lang) {
        result = execute('python3', '-c', pythonCode, lang, null, textData)
        return addHtmlOutput(result, 'code::' + lang)
    }

    function highlightCode() {
        var formats = dataFormats()
        if ( formats.indexOf(mimeHidden) != -1
          || formats.indexOf(mimeHtml) != -1 ) {
            return false
        }

        var textData = data(mimeText)
        var text = str(textData)
        if (!text)
            return false

        tags = str(data(mimeTags))

        try {
            var lang = langFromTags(tags)
                    || langFromPrefix(text)
                    || langFromTextPart(text)
            if (lang)
                return code(textData, lang)
        } catch(e) {
            popup(errorLabel, e)
            serverLog(errorLabel + ': ' + e)
        }

        return false
    }

    highlightCode()"
Display=true
Icon=\xf121
Name=Highlight Code
