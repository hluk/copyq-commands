[Commands]
1\Command="
    /*
    This adds support for KDE, Gnome and Sway Wayland sessions.

    For Sway, this requires:
    - `ydotool` utility to send copy/paste shortcuts to applications
    - `grim` for taking screenshot
    - `slurp` for selecting screenshot area

    For KDE, this requires Spectacle for taking screenshots.

    Getting current window title is not supported in KDE.

    Global shortcut commands can be triggered with:

        copyq triggerGlobalShortcut {COMMAND_NAME}

    On Gnome, clipboard monitor is executed as X11 app using XWayland.

    Links:
    - https://github.com/ReimuNotMoe/ydotool
    - https://github.com/emersion/grim
    - https://github.com/emersion/slurp
    */

    function isSway() {
        return env('SWAYSOCK').length != 0
    }

    function isGnome() {
        return str(env('XAUTHORITY')).includes('mutter-Xwayland')
    }

    function run() {
        var p = execute.apply(this, arguments)
        if (!p) {
            throw 'Failed to start ' + arguments[0]
        }
        if (p.exitCode && p.stderr.length) {
            throw 'Failed command ' + arguments[0] + ': ' + str(p.stderr)
        }
        return p.stdout
    }

    function swayGetTree() {
        var tree = run('swaymsg', '-t', 'get_tree')
        return JSON.parse(str(tree))
    }

    function swayFindFocused(tree) {
        var nodes = tree['nodes'].concat(tree['floating_nodes'])
        for (var i in nodes) {
            var node = nodes[i]
            if (node['focused'])
                return node
            var focusedNode = swayFindFocused(node)
            if (focusedNode)
                return focusedNode
        }
        return undefined
    }

    function sendShortcut(...shortcut) {
        sleep(100)
        run('ydotool', 'key', ...shortcut)
    }

    global.currentWindowTitle = function() {
        if (!isSway())
            return ''
        var tree = swayGetTree()
        var focusedNode = swayFindFocused(tree)
        return focusedNode ? focusedNode['name'] : ''
    }

    global.paste = function() {
        sendShortcut('42:1', '110:1', '110:0', '42:0')
    }

    var copy_ = global.copy
    global.copy = function() {
        if (arguments.length == 0) {
            sendShortcut('29:1', '46:1', '46:0', '29:0')
        } else {
            copy_.apply(this, arguments)
        }
    }

    global.focusPrevious = function() {
        hide()
    }

    var monitorClipboard_ = monitorClipboard
    monitorClipboard = function() {
        if (isGnome() && env('QT_QPA_PLATFORM') != 'xcb') {
            serverLog('Starting X11 clipboard monitor')
            setEnv('QT_QPA_PLATFORM', 'xcb')
            execute('copyq', '--clipboard-access', 'monitorClipboard')
            serverLog('Stopping X11 clipboard monitor')
            return
        }
        return monitorClipboard_()
    }

    var onClipboardChanged_ = onClipboardChanged
    onClipboardChanged = function() {
        var title = currentWindowTitle()
        if (title)
            setData(mimeWindowTitle, title)
        onClipboardChanged_()
    }

    screenshot = function(format, screenName) {
        if (isSway())
            return run('grim', '-t', format || 'png', '-')
        return run(
            'spectacle',
            '--background',
            '--nonotify',
            '--pointer',
            '--output',
            '/dev/stdout',
        )
    }

    screenshotSelect = function(format, screenName) {
        if (isSway()) {
            var geometry = run('slurp')
            geometry = str(geometry).trim()
            return run('grim', '-c', '-g', geometry, '-t', format || 'png', '-')
        }
        return run(
            'spectacle',
            '--background',
            '--nonotify',
            '--pointer',
            '--region',
            '--output',
            '/dev/stdout',
        )
    }

    global.triggerGlobalShortcut = function(commandName) {
        var cmds = commands()
        for (var i in cmds) {
            var cmd = cmds[i]
            if (cmd.isGlobalShortcut && cmd.enable && cmd.name == commandName)
                return action(cmd.cmd)
        }
        throw 'Failed to find enabled global command with given name'
    }"
1\Icon=\xf2d0
1\IsScript=true
1\Name=Wayland Support
2\Command="
    copyq:
    var moveToTop = config('move') == 'true'
    var activatePastes = config('activate_pastes') == 'true'
    var activateCloses = config('activate_closes') == 'true'
    var activateFocuses = config('activate_focuses') == 'true'

    copy(mimeItems, input())

    if (moveToTop)
        move(0)

    if (activateCloses)
        hide()

    if (activateFocuses || activatePastes)
        focusPrevious()

    if (activatePastes)
        paste()"
2\Icon=\xf328
2\InMenu=true
2\Input=application/x-copyq-item
2\Name=Paste Items when Activated
2\Shortcut=enter, return
size=2
