[Command]
Name=Convert Markdown to ...
Command="
    copyq:
    // # get input text to be converted

    var markdown = str(input());
    if (!markdown) {
        copy();
        markdown = clipboard();
    }

    // # get conversion options from user

    var renderers = {
        'HTML': 'mistletoe.html_renderer.HTMLRenderer',
        'HTML + code highlighting': 'mistletoe.contrib.pygments_renderer.PygmentsRenderer', // requires: `pip3 install pygments`
        'HTML + GitHub Wiki': 'mistletoe.contrib.github_wiki.GithubWikiRenderer',
        'HTML + MathJax': 'mistletoe.contrib.mathjax.MathJaxRenderer',
        'Jira': 'mistletoe.contrib.jira_renderer.JIRARenderer',
        'JSON (AST)': 'mistletoe.ast_renderer.ASTRenderer',
        'LaTeX': 'mistletoe.latex_renderer.LaTeXRenderer',
        'XWiki Syntax 2.0': 'mistletoe.contrib.xwiki20_renderer.XWiki20Renderer',
    }

    var settingsPrefix = 'convert-markdown/';
    var optFormat = 'Target format';
    var optAddToHistory = 'Add result to clipboard history';
    var optHtmlAsSourceOnly = 'Output HTML as source code only';

    var format = settings(settingsPrefix + optFormat);
    var addToHistory = settings(settingsPrefix + optAddToHistory) == 'true';
    var htmlAsSourceOnly = settings(settingsPrefix + optHtmlAsSourceOnly) == 'true';

    var options = dialog(
        '.title', 'Convert Markdown to ...',
        '.defaultChoice', format,
        optFormat, Object.keys(renderers),
        optAddToHistory, addToHistory,
        optHtmlAsSourceOnly, htmlAsSourceOnly
    );

    if (!options) {
        abort();
    }

    // # parse and store the options

    format = options[optFormat];
    addToHistory = options[optAddToHistory];
    htmlAsSourceOnly = options[optHtmlAsSourceOnly];

    settings(settingsPrefix + optFormat, format);
    settings(settingsPrefix + optAddToHistory, addToHistory);
    settings(settingsPrefix + optHtmlAsSourceOnly, htmlAsSourceOnly);

    // # do the conversion

    function tempFile(content) {
        var file = new TemporaryFile();
        file.openWriteOnly();
        file.write(content);
        file.close();
        return file;
    }

    var mdFile = tempFile(markdown);

    var cmdRes = execute('python', '-m', 'mistletoe', mdFile.fileName(), '--renderer', renderers[format]);

    if (!cmdRes || cmdRes.exit_code != 0) {
        popup('', 'Conversion failed: ' + (cmdRes ? str(cmdRes.stderr) : 'Python executable is probably not available?'), -1);
        fail();
    }

    // # store conversion result

    var output = str(cmdRes.stdout);

    function html2text(html) {
        // strip tags
        var text = html.replace(/<[^>]*>?/gm, '');
        // replace known entities
        text = text.replace(/&([^;]+);/g, function (match, p1) {
            var chars = {
                'lt': '<',
                'gt': '>',
                'amp': '&',
                '#39': '\\'',
                'nbsp': '\\xa0',
            }
            return chars[p1] || p1;
        });
        return text;
    }

    var item = {};
    if (htmlAsSourceOnly || format.indexOf('HTML') == -1) {
        item[mimeText] = output;
    } else {
        item[mimeHtml] = output;
        item[mimeText] = html2text(output);
    }

    function copyItem(item) {
        args = [];
        for (prop in item) {
            args.push(prop, item[prop]);
        }

        // copy() signature: copy(mimeType, data, [mimeType, data]...)
        copy.apply(this, args);
    }

    if (addToHistory) {
        add(item);
    }
    copyItem(item);

    popup('', 'Markdown successfully converted to ' + format + '!');
    "
InMenu=true
IsGlobalShortcut=true
Icon=\xf103
GlobalShortcut=meta+alt+c
