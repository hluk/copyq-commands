[Command]
Command="
    copyq:
    const userTags = plugins.itemtags.userTags || [];
    const tagsMime = 'application/x-copyq-tags';
    const tagSeparator = ', ';
    const timeMime = 'application/x-copyq-user-time';
    const tabMime = 'application/x-copyq-user-tab';
    const indexMime = 'application/x-copyq-user-index';

    const selectedItem = selectedItemData(0) || {};
    const currentTime = new Date().toISOString();
    const currentTab = str(selectedTab() || config('clipboard_tab'));
    const currentTagsString = str(selectedItem[tagsMime] || '');
    const currentTags = currentTagsString.split(tagSeparator);
    const currentNotes = str(selectedItem[mimeItemNotes] || '');
    var currentText = str(selectedItem[mimeText] || '');
    if (!currentText) {
      try {
        sleep(200);
        copy();
        currentText = str(clipboard());
      } catch (e) {}
    }

    const dialogTitle = 'Detailed Copy';
    const tabField = '&Target Tab';
    const targetTabs = [currentTab].concat(tab().filter((t) => t !== currentTab));
    const tagsField = '&Add Tags (comma separated)';
    const removeField = '&Remove from ' + currentTab.replace('&', '') + ' Tab';
    const notesField = '&Notes';
    const contentField = '&Item Content';
    const dialogWidth = 400;
    const dialogHeight = 300;

    function copyMultipleItems() {
      const options = dialog.apply(this, [
        '.title',
        dialogTitle,
        tabField,
        targetTabs,
        removeField,
        true,
      ]);

      if (!options) {
        abort();
      }

      const items = selectedItems();
      const targetTab = options[tabField];

      if (targetTab && currentTab != targetTab) {
        const toAdd = [];
        for (i in items) {
          const item = getitem(items[i]);
          item[indexMime] = items[i];
          item[timeMime] = currentTime;
          toAdd.push(item);
        }

        tab(targetTab);
        add.apply(this, toAdd.reverse());
        tab(currentTab);

        if (options[removeField]) {
          remove.apply(this, items);
        }
      }
    }

    function copySingleItem() {
      const fields = [
        tabField,
        targetTabs,
        tagsField,
        [''].concat(userTags.map((t) => str(t))),
        removeField,
        true,
        // add new line to enable fake vim mode
        notesField,
        currentNotes + '\\n',
        contentField,
        currentText + '\\n',
      ];

      const newFields = dialog.apply(
        this,
        [
          '.width',
          dialogWidth,
          '.height',
          dialogHeight,
          '.title',
          dialogTitle,
        ].concat(fields)
      );

      if (!newFields) {
        abort();
      }

      parseValue = (data) => {
        var hasValue = !/^\\s*$/.test(data);
        if (hasValue) {
          // remove trailing new lines
          return data.replace(/\\n*$/, '');
        }
        return '';
      };

      const newTags = parseValue(newFields[tagsField])
        .split(',')
        .map((t) => parseValue(t));
      const newTagsString = newTags.join(tagSeparator);
      const joinedTags = currentTagsString
        ? currentTagsString + tagSeparator + newTagsString
        : newTagsString;
      const newTab = parseValue(newFields[tabField]) || config('clipboard_tab');
      const newNotes = parseValue(newFields[notesField]);
      const newText = parseValue(newFields[contentField]);

      const tabChanged = newTab !== currentTab;
      const tagsChanged = newTagsString && newTags.some((t) => !currentTags.includes(t));
      const notesChanged = newNotes !== currentNotes;
      const contentChanged = newText !== parseValue(currentText);

      if (!tabChanged && !tagsChanged && !notesChanged && !contentChanged) {
        abort();
      }

      var item = {
        [tagsMime]: joinedTags,
        [mimeItemNotes]: newNotes,
        [mimeText]: newText,
        [timeMime]: currentTime,
      };

      if (newFields[removeField]) {
        indexOfItem = (item) => {
          itemsEqual = (item, i) => {
            for (var mime in item) {
              if (str(read(mime, i)) !== str(item[mime])) return false;
            }
            return true;
          };

          for (var i = 0; i < size(); ++i) {
            if (itemsEqual(item, i)) return i;
          }
          return 0;
        };

        var currentIndex = indexOfItem(selectedItem);

        remove(currentIndex);
      }

      tab(newTab);
      add(item);
    }

    if (selectedItems().length > 1) {
      copyMultipleItems();
      abort();
    }
    copySingleItem();
"
GlobalShortcut=meta+ctrl+c
Icon=\xf46d
InMenu=true
IsGlobalShortcut=true
Name=Detailed Copy
Shortcut=meta+ctrl+c