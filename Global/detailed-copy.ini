[Command]
Command="
    copyq:
    const userTags = plugins.itemtags.userTags || [];
    const tagsMime = 'application/x-copyq-tags';
    const tagSeparator = ', ';
    const timeMime = 'application/x-copyq-user-time';
    const tabMime = 'application/x-copyq-user-tab';

    const dialogTitle = 'Detailed Copy';
    const tabField = '&Target Tab';
    const tagField = '&Add Tags (comma separated)';
    const notesField = '&Notes';
    const contentField = '&Item Content';
    const dialogWidth = 400;
    const dialogHeight = 300;

    const selectedItem = selectedItemData(0) || {};
    const currentTime = new Date().toISOString();
    const currentTab = str(selectedTab() || config('clipboard_tab'));
    const currentTagsString = str(selectedItem[tagsMime] || '');
    const currentTags = currentTagsString.split(tagSeparator);
    const currentNotes = str(selectedItem[mimeItemNotes] || '');
    var currentText = str(selectedItem[mimeText] || '');

    if (!currentText) {
      try {
        sleep(200);
        copy();
        currentText = str(clipboard());
      } catch (e) {}
    }

    const fields = [
      tabField, [currentTab].concat(tab().filter(t => t !== currentTab)),
      tagField, [''].concat(userTags.map((t) => str(t))),
      // add new line to enable fake vim mode
      notesField, currentNotes + '\\n',
      contentField, currentText + '\\n',
    ];

    const newFields = dialog.apply(
      this,
      [
        '.width', dialogWidth,
        '.height', dialogHeight,
        '.title', dialogTitle,
      ].concat(fields)
    );

    if (!newFields) {
      abort();
    }

    parseValue = (data) => {
      var hasValue = !/^\\s*$/.test(data);
      if (hasValue) {
        // remove trailing new lines
        return data.replace(/\\n*$/, '');
      }
      return '';
    };

    const newTags = parseValue(newFields[tagField]).split(',').map(t => parseValue(t));
    const newTagsString = newTags.join(tagSeparator);
    const joinedTags = currentTagsString ? currentTagsString + tagSeparator + newTagsString : newTagsString;
    const newTab = parseValue(newFields[tabField]) || config('clipboard_tab');
    const newNotes = parseValue(newFields[notesField]);
    const newText = parseValue(newFields[contentField]);

    const tagsChanged = newTagsString && newTags.some(t => !currentTags.includes(t));
    const notesChanged = newNotes !== currentNotes;
    const contentChanged = newText !== parseValue(currentText);

    if (!tagsChanged && !notesChanged && !contentChanged) {
      abort();
    }

    var item = {
      [tagsMime]: joinedTags,
      [mimeItemNotes]: newNotes,
      [mimeText]: newText,
      [timeMime]: currentTime,
    };

    tab(newTab);
    add(item);"
GlobalShortcut=meta+ctrl+c
Icon=\xf46d
InMenu=true
IsGlobalShortcut=true
Name=Detailed Copy
Shortcut=meta+ctrl+c
