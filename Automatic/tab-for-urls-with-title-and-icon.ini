[Command]
Automatic=true
Command="
    copyq:
    var tabName = '&URLs';
    function lower(data) {
        return str(data).toLowerCase()
    }

    function findHeader(reply, headerName) {
        reply.data  // fetches data and headers
        var headers = reply.headers
        for (var i in headers) {
            var header = headers[i]
            if (lower(header[0]) === headerName)
               return header[1]
        }
        return ''
    }

    function fetchContent(url, maxRedirects) {
        if (maxRedirects === undefined)
            maxRedirects = 4

        serverLog('Fetching: ' + url)
        var reply = networkGet(url)
        if (maxRedirects == 0)
            return reply

        var header = findHeader(reply, 'location')
        if (header)
            return fetchContent(header, maxRedirects - 1)

        return reply
    }

    function decodeHtml(html) {
        return html.replace(/&#(\\d+);/g, function(match, charCode) {
            return String.fromCharCode(charCode);
        });
    }

    function isHtml(reply) {
        var headers = reply.headers
        for (var i in headers) {
          var header = headers[i]
          if (lower(header[0]) === 'content-type')
             return lower(header[1]).indexOf(mimeHtml) === 0
        }
        return false
    }

    function grep(content, re) {
        return content ? (re.exec(content) || [])[1] : ''
    }

    function getTitle(content) {
        var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)
        return title ? decodeHtml(title.trim()) : ''
    }

    function getFavicon(content) {
        var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)
        var icon = grep(iconLine, /href=[\"']([^\"']*)/i)

        if (!icon)
          return ''

        // Icon path can be complete URL.
        if (icon.indexOf('://') != -1)
          return fetchContent(icon).data

        // Icon path can be missing protocol.
        if (icon.substr(0, 2) === '//') {
          var i = url.search(/\\/\\//)
          var protocol = (i == -1) ? 'http:' : url.substr(0, i)
          return fetchContent(protocol + icon).data
        }

        // Icon path can be relative to host URL.
        if (icon[0] === '/') {
          var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)
          return fetchContent(baseUrl + icon).data
        }

        // Icon path can be relative to current URL.
        var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)
        return fetchContent(baseUrl + icon).data
    }

    var url = str(input()).trim()
    serverLog('Fetching icon and title: ' + url)

    // URL already added? (Just check the top of the list.)
    if (url === str(read(0)))
        abort()

    // Fetch HTML.
    var reply = fetchContent(url)
    if (!isHtml(reply))
        abort()

    var content = str(reply.data)

    var title = getTitle(content)
    var icon = getFavicon(content)

    setData(mimeText, url)
    setData(mimeItemNotes, title || '')
    setData(mimeIcon, icon)
    setData(mimeOutputTab, tabName)"
Icon=\xf0c1
Input=text/plain
Match=^https?://
Name=Tab for URLs with Title and Icon
